#!/usr/bin/env bash

# Get django environment variables
celeryenv=`cat /opt/elasticbeanstalk/deployment/env | tr '\n' ',' | sed 's/export //g' | sed 's/$PATH/%(ENV_PATH)s/g' | sed 's/$PYTHONPATH//g' | sed 's/$LD_LIBRARY_PATH//g' | sed 's/%/%%/g'`
celeryenv=${celeryenv%?}

# Create celery configuraiton script
celeryconf="[program:celeryd-worker]
; Set full path to celery program if using virtualenv
command=/var/app/venv/*/bin/celery worker -A ouchi -l Info -P gevent --app=ouchi.celery:app
directory=/var/app/current
user=nobody
numprocs=1
stdout_logfile=/var/log/celery-worker.log
stderr_logfile=/var/log/celery-worker.log
autostart=true
autorestart=true
startsecs=10
; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 600
; When resorting to send SIGKILL to the program to terminate it
; send SIGKILL to its whole process group instead,
; taking care of its children as well.
killasgroup=true
; if rabbitmq is supervised, set its priority higher
; so it starts first
priority=998
environment=$celeryenv
; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 600
; When resorting to send SIGKILL to the program to terminate it
; send SIGKILL to its whole process group instead,
; taking care of its children as well.
killasgroup=true
; if rabbitmq is supervised, set its priority higher
; so it starts first
priority=998
environment=$celeryenv"

# Create the celery supervisord conf script
echo "$celeryconf" | tee /etc/supervisord.d/celery.conf

# Add configuration script to supervisord conf (if not there already)
if ! grep -Fxq "[include]" /etc/supervisord.conf
  then
  echo "[include]" | tee -a /etc/supervisord.conf
  echo "files: celery.conf" | tee -a /etc/supervisord.conf
fi

# Reread the supervisord config
supervisorctl -c /etc/supervisord.conf reread

# Update supervisord in cache without restarting all services
supervisorctl -c /etc/supervisord.conf update

# Start/Restart celeryd through supervisord
# supervisorctl -c /etc/supervisord.conf restart celeryd-beat
supervisorctl -c /etc/supervisord.conf restart celeryd-worker

# include below code in double quotes
# [program:celeryd-beat]
# ; Set full path to celery program if using virtualenv
# command=/opt/python/run/venv/bin/celery beat -A boilerplate --loglevel=INFO --workdir=/tmp -S django --pidfile /tmp/celerybeat.pid

# directory=/opt/python/current/app
# user=nobody
# numprocs=1
# stdout_logfile=/var/log/celery-beat.log
# stderr_logfile=/var/log/celery-beat.log
# autostart=true
# autorestart=true
# startsecs=10

